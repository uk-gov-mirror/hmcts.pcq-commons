
plugins {
    id 'java'
    id 'checkstyle'
    id 'uk.gov.hmcts.java' version '0.12.67'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.springframework.boot' version '3.5.7'
    id "io.freefair.lombok" version "8.14.2"
    id 'com.github.ben-manes.versions' version '0.53.0'
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
}


def buildNumber = System.getenv("RELEASE_VERSION")?.replace("refs/tags/", "") ?: getCurrentGitBranch()

group = 'com.github.hmcts'
// Do not change this version number
version = buildNumber

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.withType(JavaExec).configureEach {
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1'
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

task printVersion {
    doLast {
        print project.version
    }
}

def pomConfig = {
    licenses {
        license {
            name "MIT License"
            url "https://www.opensource.org/licenses/MIT"
            distribution "repo"
        }
    }

    scm {
        url "https://github.com/hmcts/pcq-commons"
    }
}

task unit(type: Test, description: 'Runs the unit tests.', group: 'Verification') {
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    useJUnitPlatform()
}


java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            groupId = project.group
            artifactId = 'pcq-commons'
            version = project.version
        }
    }
    repositories {
        maven {
            name = "AzureArtifacts"
            url = uri("https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1")
            credentials {
                username = System.getenv("AZURE_DEVOPS_ARTIFACT_USERNAME")
                password = System.getenv("AZURE_DEVOPS_ARTIFACT_TOKEN")
            }
        }
    }
}

checkstyle {
    maxWarnings = 0
    toolVersion = '11.0.1'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    configDirectory = new File(rootDir, 'config/checkstyle')
}

def versions = [
        feignForm         : '3.8.0',
        jackson           : '2.20.0',
        jjwt              : '0.13.0',
        junit             : '5.14.0',
        junitPlatform     : '1.14.0',
        lombok            : '1.18.42',
        mockito           : '5.20.0',
        springBoot        : '3.5.7'
]

dependencies {
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson
    implementation group: 'io.github.openfeign.form', name: 'feign-form-spring', version: versions.feignForm
    implementation group: 'io.github.openfeign.form', name: 'feign-form', version: versions.feignForm
    implementation group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.19.0'
    implementation group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '4.0.6'
    implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.3.0'
    implementation group: "io.jsonwebtoken", name: "jjwt-api", version: versions.jjwt

    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: versions.jjwt
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: versions.jjwt

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.20.0'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: versions.mockito
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
    testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-launcher', version: versions.junitPlatform
    testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-commons', version: versions.junitPlatform

}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

test {
    useJUnitPlatform()
    testLogging {
        events "skipped", "failed"
    }
    systemProperty "user.timezone", "UTC"
}

bootJar {
    enabled = false
}

jar {
    enabled = true
    archiveClassifier = ''
}

def getCurrentGitBranch() {
    def gitBranch = "DEV-SNAPSHOT"
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
    } catch (e) {
    }
    return gitBranch
}
